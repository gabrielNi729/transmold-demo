{"version":3,"sources":["webpack:///./src/views/demo/Demo-En.vue?710b","webpack:///src/views/demo/Demo-En.vue","webpack:///./src/views/demo/Demo-En.vue?3f8a","webpack:///./src/views/demo/Demo-En.vue","webpack:///./node_modules/core-js/modules/es.array.slice.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","_l","i","index","attrs","fields","providedInsts","on","$event","alterInst","staticStyle","addInst","_v","staticRenderFns","component","$","isObject","isArray","toAbsoluteIndex","toLength","toIndexedObject","createProperty","arrayMethodHasSpeciesSupport","wellKnownSymbol","SPECIES","nativeSlice","slice","max","Math","target","proto","forced","start","end","Constructor","result","n","O","length","k","fin","undefined","constructor","Array","prototype","call"],"mappings":"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","file":"js/chunk-61cc0b8d.587321ff.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._l((_vm.allInsts),function(i,index){return _c('div',[_c('expression-atom',{attrs:{\"name\":(\"Inst-\" + (index+1)),\"variables\":_vm.fields,\"instances\":_vm.providedInsts[index]},on:{\"alter\":function($event){return _vm.alterInst($event, index)}}}),_c('expression-note',{attrs:{\"instance\":i,\"mode\":\"code\",\"prefix\":\"MYSQL: \"}})],1)}),_c('div',{staticStyle:{\"cursor\":\"pointer\",\"font-size\":\"1.5em\",\"margin-top\":\"40px\"},on:{\"click\":_vm.addInst}},[_vm._v(\"+\")])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div>\n        <div v-for=\"(i, index) in allInsts\">\n            <expression-atom :name=\"`Inst-${index+1}`\" :variables=\"fields\" :instances=\"providedInsts[index]\" @alter=\"alterInst($event, index)\"></expression-atom>\n            <expression-note :instance=\"i\" mode=\"code\" prefix=\"MYSQL: \"></expression-note>\n        </div>\n        <div style=\"cursor: pointer; font-size: 1.5em; margin-top: 40px\" @click=\"addInst\">+</div>\n    </div>\n</template>\n\n<script>\n\n    import ExpressionAtom from '../../mould-v/clause/ExpressionAtom'\n    import ExpressionNote from '../../mould-v/explain/ExpressionNote'\n    import { Table, Field, Enum, Operators, i18n } from '../../mould';\n\n    export default {\n\n        name: 'demo-en',\n\n        components: {ExpressionAtom, ExpressionNote},\n\n        data(){\n            return {\n                fields: [],\n                allInsts: [null, null],\n                providedInsts: []\n            }\n        },\n\n        computed: {\n\n        },\n\n        mounted(){\n\n            i18n.switchTo('en');\n            Operators.activateContext('mysql-cn');\n\n            let allData = [\n                new Table({\n                    name: 'USER_INFO',\n                    label: 'users\\' basic info'\n                }).addFields([\n                    new Field({\n                        name: 'USER_ID',\n                        label: 'user id',\n                        dataType: 'string'\n                    }),\n                    new Field({\n                        name: 'USER_NAME',\n                        label: 'user name',\n                        dataType: 'string'\n                    }),\n                    new Field({\n                        name: 'AGE',\n                        label: 'age',\n                        dataType: 'number',\n                        distributeType: 'metrics',\n                        unit: 'year'\n                    }),\n                    new Field({\n                        name: 'GENDER',\n                        label: 'gender',\n                        dataType: 'number',\n                        distributeType: 'category',\n                    }).addEnums([\n                        new Enum({\n                            code: 0,\n                            label: 'male'\n                        }),\n                        new Enum({\n                            code: 1,\n                            label: 'female'\n                        })\n                    ])\n                ]),\n\n                new Table({\n                    name: 'COMMODITY_INFO',\n                    label: 'commodities\\' info'\n                }).addFields([\n                    new Field({\n                        name: 'COMMODITY_ID',\n                        label: 'commodity id',\n                        dataType: 'string'\n                    }),\n                    new Field({\n                        name: 'COMMODITY_NAME',\n                        label: 'commodity name',\n                        dataType: 'string'\n                    }),\n                    new Field({\n                        name: 'UNIT_PRICE',\n                        label: 'unit price',\n                        dataType: 'number',\n                        distributeType: 'metrics',\n                        unit: 'USD'\n                    }),\n                ]),\n\n                new Table({\n                    name: 'COMMODITY_PURCHASE_LOG',\n                    label: 'commodities\\' transaction'\n                }).addFields([\n                    new Field({\n                        name: 'COMMODITY_ID',\n                        label: 'commodity id (disabled)',\n                        dataType: 'string'\n                    }),\n                    new Field({\n                        name: 'USER_ID',\n                        label: 'user id (disabled)',\n                        dataType: 'string'\n                    }),\n                    new Field({\n                        name: 'QUANTITY',\n                        label: 'quantity',\n                        dataType: 'number',\n                        distributeType: 'metrics',\n                        unit: 'unit'\n                    }),\n                    new Field({\n                        name: 'DISCOUNT',\n                        label: 'discount',\n                        dataType: 'string',\n                        distributeType: 'category',\n                    }).addEnums([\n                        new Enum({\n                            code: 'none',\n                            label: 'no discount'\n                        }),\n                        new Enum({\n                            code: '0.8-all',\n                            label: '20% off for total'\n                        }),\n                        new Enum({\n                            code: '0.5-sec',\n                            label: '50% off for the second'\n                        }),\n                        new Enum({\n                            code: 'free',\n                            label: 'free'\n                        })\n                    ])\n                ])\n            ];\n\n\n            this.fields = [];\n            allData.forEach(t => {\n                this.fields.push(...t.getFields());\n            })\n\n        },\n\n        methods: {\n\n            alterInst(inst, index){\n                this.allInsts[index] = inst;\n                this.updateProvided();\n            },\n\n            addInst(){\n                this.allInsts.push(null);\n                this.updateProvided();\n            },\n\n            updateProvided(){\n                this.$nextTick(() => {\n                    let arr = [];\n                    let len = this.allInsts.length;\n                    this.allInsts.forEach((i, index) => {\n                        arr.push(this.allInsts.slice(0, index));\n                    });\n                    this.providedInsts = arr;\n                });\n            }\n        },\n\n        watch: {\n\n\n        }\n\n    }\n</script>\n\n<style scoped>\n\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Demo-En.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Demo-En.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Demo-En.vue?vue&type=template&id=2d02b6de&scoped=true&\"\nimport script from \"./Demo-En.vue?vue&type=script&lang=js&\"\nexport * from \"./Demo-En.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2d02b6de\",\n  null\n  \n)\n\nexport default component.exports","'use strict';\nvar $ = require('../internals/export');\nvar isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\nvar nativeSlice = [].slice;\nvar max = Math.max;\n\n// `Array.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.slice\n// fallback for not array-like ES3 strings and DOM objects\n$({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('slice') }, {\n  slice: function slice(start, end) {\n    var O = toIndexedObject(this);\n    var length = toLength(O.length);\n    var k = toAbsoluteIndex(start, length);\n    var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n    var Constructor, result, n;\n    if (isArray(O)) {\n      Constructor = O.constructor;\n      // cross-realm fallback\n      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {\n        Constructor = undefined;\n      } else if (isObject(Constructor)) {\n        Constructor = Constructor[SPECIES];\n        if (Constructor === null) Constructor = undefined;\n      }\n      if (Constructor === Array || Constructor === undefined) {\n        return nativeSlice.call(O, k, fin);\n      }\n    }\n    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));\n    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);\n    result.length = n;\n    return result;\n  }\n});\n"],"sourceRoot":""}